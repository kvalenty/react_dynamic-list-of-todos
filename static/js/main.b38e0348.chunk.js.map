{"version":3,"sources":["Components/api/api.ts","Components/constant/constants.ts","Components/LoadButton/Button.tsx","Components/TodoList/TodoList.tsx","Components/FilterButtons/FilterButtonsData.ts","Components/FilterButtons/FilterButtons.tsx","App.tsx","index.tsx"],"names":["loadData","url","a","fetch","then","response","json","data","noUser","id","username","email","website","name","phone","createdAt","Date","updatedAt","address","Button","props","onLoadData","title","className","type","onClick","TodoList","todosList","map","todo","key","scope","completed","user","filterButtonsData","sortingPattern","itemA","itemB","localeCompare","Number","FilterButtons","onFilterTodos","button","App","useState","setTodoList","isLoad","setLoad","isLoading","setLoading","preparedTodos","todos","users","find","userId","sort","ReactDOM","render","document","getElementById"],"mappings":"iSAAaA,G,MAAQ,uCAAG,WAAUC,GAAV,iBAAAC,EAAA,sEACCC,MAAMF,GAAKG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UADtC,uBACdC,EADc,EACdA,KADc,kBAGfA,GAHe,2CAAH,uDCKRC,EAAe,CAC1BC,GAAI,EACJC,SAAU,UACVC,MAAO,WACPC,QAAS,UACTC,KAAM,UACNC,MAAO,WACPC,UAAW,IAAIC,KACfC,UAAW,IAAID,KACfE,QAAS,MCPEC,EAAoB,SAACC,GAAW,IACnCC,EAAsBD,EAAtBC,WAAYC,EAAUF,EAAVE,MAEpB,OACE,4BACEC,UAAU,kBACVC,KAAK,SACLC,QAASJ,GAERC,ICTMI,EAAsB,SAACN,GAAW,IACrCO,EAAcP,EAAdO,UAER,OACE,2BAAOJ,UAAU,qBACf,+BACGI,EAAUC,KAAI,SAAAC,GAAI,OACjB,wBAAIC,IAAKD,EAAKpB,IACZ,wBAAIsB,MAAM,OAAOF,EAAKG,UAAY,OAAS,UAC3C,4BAAKH,EAAKP,OACV,4BAAKO,EAAKI,KAAKpB,aCVdqB,EAAkC,CAC7C,CACEZ,MAAO,WACPa,eAAgB,SAACC,EAAaC,GAAd,OAA8BD,EAAMd,MAAMgB,cAAcD,EAAMf,SAEhF,CACEA,MAAO,YACPa,eAAgB,SAACC,EAAaC,GAAd,OAA8BE,OAAOH,EAAMJ,WAAaO,OAAOF,EAAML,aAEvF,CACEV,MAAO,UACPa,eAAgB,SAACC,EAAaC,GAAd,OACdD,EAAMH,KAAKpB,KAAKyB,cAAcD,EAAMJ,KAAKpB,SCVlC2B,EAA2B,SAACpB,GAAW,IAC1CqB,EAAkBrB,EAAlBqB,cAER,OACE,yBAAKlB,UAAU,uCACZW,EAAkBN,KAAI,SAAAc,GAAM,OAC3B,kBAAC,EAAD,CACEZ,IAAKY,EAAOpB,MACZD,WAAY,kBAAMoB,EAAcC,EAAOP,iBACvCb,MAAOoB,EAAOpB,aCTXqB,EAAU,WAAO,IAAD,EACMC,mBAAiB,IADvB,mBACpBjB,EADoB,KACTkB,EADS,OAEDD,oBAAkB,GAFjB,mBAEpBE,EAFoB,KAEZC,EAFY,OAGKH,oBAAkB,GAHvB,mBAGpBI,EAHoB,KAGTC,EAHS,KAKrBC,EAAgB,SAACC,EAAeC,GACpC,OAAOD,EAAMvB,KAAI,SAAAC,GAAI,kCAChBA,GADgB,IAEnBI,KAAMmB,EAAMC,MAAK,SAAApB,GAAI,OAAIA,EAAKxB,KAAOoB,EAAKyB,WAAW9C,QAInDa,EAAU,uCAAG,8BAAAnB,EAAA,6DACjB+C,GAAW,GADM,SAGGjD,ELtBC,2CKmBJ,cAGXmD,EAHW,gBAIGnD,ELtBC,2CKkBJ,OAIXoD,EAJW,OAMjBP,EAAYK,EAAcC,EAAOC,IACjCL,GAAQ,GACRE,GAAW,GARM,4CAAH,qDAehB,OACE,oCACE,sDAEEH,GACA,kBAAC,EAAD,CACExB,MAAO0B,EAAY,aAAe,OAClC3B,WAAYA,IAIfyB,GACC,oCACE,kBAAC,EAAD,CAAeL,cAjBD,SAACN,GACrBU,EAAY,YAAIlB,GAAW4B,KAAKpB,OAiB1B,kBAAC,EAAD,CAAUR,UAAWA,OC9C/B6B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.b38e0348.chunk.js","sourcesContent":["export const loadData = async <T>(url: string): Promise<T[]> => {\n  const { data } = await fetch(url).then(response => response.json());\n\n  return data;\n};\n","import { User } from '../interfaces/interfaces';\n\nexport const URL_TODOS = 'https://mate.academy/students-api/todos';\nexport const URL_USERS = 'https://mate.academy/students-api/users';\n\nexport const noUser: User = {\n  id: 0,\n  username: 'no name',\n  email: 'no email',\n  website: 'no site',\n  name: 'no name',\n  phone: 'no phone',\n  createdAt: new Date(),\n  updatedAt: new Date(),\n  address: null,\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  onLoadData: () => void;\n  title: string;\n}\n\nexport const Button: FC<Props> = (props) => {\n  const { onLoadData, title } = props;\n\n  return (\n    <button\n      className=\"btn btn-primary\"\n      type=\"button\"\n      onClick={onLoadData}\n    >\n      {title}\n    </button>\n  );\n};\n","import React, { FC } from 'react';\nimport { Todo } from '../interfaces/interfaces';\n\ninterface Props {\n  todosList: Todo[];\n}\n\nexport const TodoList: FC<Props> = (props) => {\n  const { todosList } = props;\n\n  return (\n    <table className=\"table table-hover\">\n      <tbody>\n        {todosList.map(todo => (\n          <tr key={todo.id}>\n            <th scope=\"row\">{todo.completed ? 'Done' : 'Undone'}</th>\n            <td>{todo.title}</td>\n            <td>{todo.user.name}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Todo, Sorting } from \"../interfaces/interfaces\";\n\ninterface ButtonData {\n  title: string;\n  sortingPattern: Sorting;\n}\n\nexport const filterButtonsData: ButtonData[] = [\n  {\n    title: 'By title',\n    sortingPattern: (itemA: Todo, itemB: Todo) => itemA.title.localeCompare(itemB.title),\n  },\n  {\n    title: 'Completed',\n    sortingPattern: (itemA: Todo, itemB: Todo) => Number(itemA.completed) - Number(itemB.completed),\n  },\n  {\n    title: 'By name',\n    sortingPattern: (itemA: Todo, itemB: Todo) => (\n      itemA.user.name.localeCompare(itemB.user.name)\n    ),\n  },\n];\n","import React, { FC } from 'react';\nimport { filterButtonsData } from './FilterButtonsData';\nimport { Sorting } from '../interfaces/interfaces';\nimport { Button } from '../LoadButton/Button';\n\ninterface Props {\n  onFilterTodos: (callBack: Sorting) => void;\n}\n\nexport const FilterButtons: FC<Props> = (props) => {\n  const { onFilterTodos } = props;\n\n  return (\n    <div className=\"w-100 d-flex justify-content-around\">\n      {filterButtonsData.map(button => (\n        <Button\n          key={button.title}\n          onLoadData={() => onFilterTodos(button.sortingPattern)}\n          title={button.title}\n        />\n      ))}\n    </div>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport './App.css';\nimport { Todo, User, Sorting } from './Components/interfaces/interfaces';\nimport { loadData } from './Components/api/api';\nimport { URL_TODOS, URL_USERS, noUser } from './Components/constant/constants';\nimport { Button } from './Components/LoadButton/Button';\nimport { TodoList } from './Components/TodoList/TodoList';\nimport { FilterButtons } from './Components/FilterButtons/FilterButtons';\n\nexport const App: FC = () => {\n  const [todosList, setTodoList] = useState<Todo[]>([]);\n  const [isLoad, setLoad] = useState<boolean>(false);\n  const [isLoading, setLoading] = useState<boolean>(false);\n\n  const preparedTodos = (todos: Todo[], users: User[]) => {\n    return todos.map(todo => ({\n      ...todo,\n      user: users.find(user => user.id === todo.userId) || noUser,\n    }));\n  };\n\n  const onLoadData = async () => {\n    setLoading(true);\n\n    const todos = await loadData<Todo>(URL_TODOS);\n    const users = await loadData<User>(URL_USERS);\n\n    setTodoList(preparedTodos(todos, users));\n    setLoad(true);\n    setLoading(false);\n  };\n\n  const onFilterTodos = (sortingPattern: Sorting) => {\n    setTodoList([...todosList].sort(sortingPattern));\n  };\n\n  return (\n    <>\n      <h1>Dynamic list of TODOs</h1>\n\n      {!isLoad && (\n        <Button\n          title={isLoading ? 'Loading...' : 'Load'}\n          onLoadData={onLoadData}\n        />\n      )}\n\n      {isLoad && (\n        <>\n          <FilterButtons onFilterTodos={onFilterTodos} />\n          <TodoList todosList={todosList} />\n        </>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}